{"version":3,"sources":["components/Title.js","components/Image.js","components/RecipeCard.js","App.js","registerServiceWorker.js","index.js"],"names":["Title","console","log","this","props","react_default","a","createElement","Header","title","Component","styled","h2","_templateObject","Image","ImageComponent","src","source","alt","text","img","Image_templateObject","RecipeCard","meals","map","item","index","Card","key","href","strSource","Image_Image","strMealThumb","strMeal","Title_Title","RecipeCard_templateObject","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","meal","_this2","axios","get","then","res","data","setState","catch","error","AppContainer","className","length","RecipeCard_RecipeCard","div","App_templateObject","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","App_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.36e224b9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nexport default class Title extends Component {\n\trender(){\n\t\tconsole.log(\"PROPS=>\", this.props);\n\t\treturn(\n          <Header>{this.props.title}</Header>\n\t\t)\n\t}\n}\n\nconst Header = styled.h2`\n    text-align: center;\n    color: #000;\n    margin: 0;\n    font-family: monospace;\n    font-size: 24px;\n    line-height: 32px;\n`;","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nexport default class Image extends Component {\n\trender(){\n\t\tconsole.log(\"PROPS=>\", this.props);\n\t\treturn(\n\t\t\t<ImageComponent src={this.props.source} alt={this.props.text} />\n\t\t)\n\t}\n}\n\nconst ImageComponent = styled.img`\n\twidth: 100%;\n\theight: 100%;\n`;","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Title from './Title';\nimport Image from './Image';\n\nexport default class RecipeCard extends Component {\n\trender(){\n\t\tconsole.log(\"PROPS=>\", this.props);\n\t\treturn(\n          <div>\n         \t{this.props.meals.map((item, index) => {\n         \t\treturn ( \n         \t\t\t<Card \n         \t\t\t\tkey={index} \n         \t\t\t\thref={item.strSource}>\n         \t\t\t\t<Image source={item.strMealThumb} text={item.strMeal} />\n         \t\t\t\t<Title title={item.strMeal} />\n         \t\t\t</Card> \n         \t\t)\n         \t})}\n          </div>\n\t\t)\n\t}\n}\n\nconst Card = styled.a`\n\tmax-width: 350px;\n\twidth: 100%;\n\tdisplay: inline-block;\n\tborder-radius: 3px;\n\ttext-decoration: none;\n\tcolor: #000;\n\tmargin: 0 10px 15px;\n    box-shadow: 7px 7px 50px -10px rgba(0, 0, 0, .5);\n`;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport RecipeCard from './components/RecipeCard';\nimport './App.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      meal: {}\n    }\n  }\n\n  componentDidMount(){\n    const URL = 'https://www.themealdb.com/api/json/v1/1/latest.php';\n\n    axios.get(URL)\n      .then(res => {\n        const meal = res.data.meals;\n        if(typeof meal === 'object'){\n          this.setState({ meal });\n        }\n      })\n      .catch(error => {\n        console.log(error);\n      });\n\n  }\n\n  render() {\n    var data = this.state.meal;\n    return (\n      <AppContainer className=\"App\">\n        {data.length > 0 && <RecipeCard meals={data} />}\n      </AppContainer>\n    );\n  }\n}\n\nconst AppContainer = styled.div`\n  background: #fff;\n  padding: 2em;\n`\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}